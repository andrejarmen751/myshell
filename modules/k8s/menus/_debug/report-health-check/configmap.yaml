apiVersion: v1
data:
  oneliner.sh: "#!/bin/sh\n##################################################### Parameters
    #####################################################\nparameter_yq_version=$1\nparameter_oc_client_pre=$2\nparameter_oc_client_pre=$3\nparameter_events_ignore_string=$4\nparameter_certificates_evade_subjects=$5\n#####################################################
    END Parameters #####################################################\n\n#####################################################
    Files #####################################################\nfile_checkapihealth=\"/tmp/checkapihealth.txt\"\nif
    [ -f \"/tmp/checkapihealth.txt\" ]; then rm /tmp/checkapihealth.txt; else touch
    /tmp/checkapihealth.txt;fi\nfile_checknodes=\"/tmp/checknodes.txt\"\nif [ -f \"/tmp/checknodes.txt\"
    ]; then rm /tmp/checknodes.txt; else touch /tmp/checknodes.txt;fi\nfile_checkpods=\"/tmp/checkpods.txt\"\nif
    [ -f \"/tmp/checkpods.txt\" ]; then rm /tmp/checkpods.txt; else touch /tmp/checkpods.txt;fi\nfile_checkpvcs=\"/tmp/checkpvcs.txt\"\nif
    [ -f \"/tmp/checkpvcs.txt\" ]; then rm /tmp/checkpvcs.txt; else touch /tmp/checkpvcs.txt;fi\nfile_checkevents=\"/tmp/checkevents.txt\"\nif
    [ -f \"/tmp/checkevents.txt\" ]; then rm /tmp/checkevents.txt; else touch /tmp/checkevents.txt;fi\nfile_checkcertificates=\"/tmp/checkcertificates.txt\"\nif
    [ -f \"/tmp/checkcertificates.txt\" ]; then rm /tmp/checkcertificates.txt; else
    touch /tmp/checkcertificates.txt;fi\nfile_tls_cert=\"/tmp/tls.crt\"\nif [ -f \"/tmp/tls.crt\"
    ]; then rm /tmp/tls.crt; else touch /tmp/tls.crt;fi\n# Specific for oc env\nfile_clusteroperator=\"/tmp/clusteroperator.txt\"\nif
    [ -f \"/tmp/clusteroperator.txt\" ]; then rm /tmp/clusteroperator.txt; else touch
    /tmp/clusteroperator.txt;fi\n#####################################################
    END files #####################################################\n\n#####################################################
    Functions #####################################################\ncheck_api_health()
    {\n    local max_attempts=40\n    local attempt=0\n\n    until kubectl get --raw
    '/livez?verbose' > /dev/null 2>&1; do\n        if [ $attempt -ge $max_attempts
    ]; then\n            return 1\n        fi\n        sleep 5\n        attempt=$((attempt
    + 1))\n    done\n}\n##################################################### END
    functions #####################################################\n\n#####################################################
    Needed Software #####################################################\ncurl -L
    -o \"/tmp/yq\" \"https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64\"\nchmod
    +x /tmp/yq\nexport PATH=\"$PATH:/tmp/\"\n\ncheck_api_health\nif kubectl api-resources
    | grep -q \"operator.openshift.io\"; then\n    if curl -L -o /tmp/oc.tar $parameter_oc_client_pre;
    then\n        :\n    else\n        curl -L -o /tmp/oc.tar $parameter_oc_client_pre\n
    \   fi\n    tar -xvf /tmp/oc.tar -C /tmp\n    chmod +x /tmp/oc\n    export PATH=\"$PATH:/tmp/\"\nfi\n#####################################################
    END Needed Software #####################################################\n\n#####################################################
    API #####################################################\necho \"[DEBUG] Inciando
    comprobación de salud.\"\n\necho \"[DEBUG] Iniciando módulo checkApiHealth.sh.\"\necho
    \"\"\n# Comprueba los endpoints de salud del apiserver.\ncheck_api_health\nLIVE_CHECK=$(kubectl
    get --raw '/livez?verbose')\ncheck_api_health\nHEALTH_CHECK=$(kubectl get --raw
    '/readyz?verbose')\n\nINDIVIDUAL_LIVE_CHECKS=$(printf '%s' \"$LIVE_CHECK\" | grep
    -E '^\\[\\+\\].+')\nOVERALL_LIVE_CHECK=$(printf '%s' \"$LIVE_CHECK\" | tail -n
    1)\n\nINDIVIDUAL_HEALTH_CHECKS=$(printf '%s' \"$HEALTH_CHECK\" | grep -E '^\\[\\+\\].+')\nOVERALL_HEALTH_CHECK=$(printf
    '%s' \"$HEALTH_CHECK\" | tail -n 1)\n\n# comprobación de live check individuales\nwhile
    read -r live_line\ndo\n  ITEM=$(printf '%s' \"$live_line\" | cut -d \" \" -f 1
    | cut -d \"]\" -f 2)\n  STATUS=$(printf '%s' \"$live_line\" | cut -d \" \" -f
    2)\n\n  if test \"$STATUS\" != \"ok\"\n  then\n    echo \"[CRITICAL] Live check
    de $ITEM en estado $STATUS.\"\n    echo \"[CRITICAL] Live check de $ITEM en estado
    $STATUS.\" >> $file_checkapihealth\n  fi\ndone <<-EOF\n$INDIVIDUAL_LIVE_CHECKS\nEOF\n\n#
    comprobación de live check general\nif test \"$OVERALL_LIVE_CHECK\" = \"livez
    check passed\"\nthen\n  echo \"[INFO] $OVERALL_LIVE_CHECK.\"\n  echo \"[INFO]
    $OVERALL_LIVE_CHECK.\" >> $file_checkapihealth\nelse\n  echo \"[CRITICAL] $OVERALL_LIVE_CHECK.\"\n
    \ echo \"[CRITICAL] $OVERALL_LIVE_CHECK.\" >> $file_checkapihealth\nfi\n\n# comprobación
    de health check individuales\nwhile read -r ready_line\ndo\n  ITEM=$(printf '%s'
    \"$ready_line\" | cut -d \" \" -f 1 | cut -d \"]\" -f 2)\n  STATUS=$(printf '%s'
    \"$ready_line\" | cut -d \" \" -f 2)\n\n  if test \"$STATUS\" != \"ok\"\n  then\n
    \   echo \"[CRITICAL] Ready check de $ITEM en estado $STATUS.\"\n    echo \"[CRITICAL]
    Ready check de $ITEM en estado $STATUS.\" >> $file_checkapihealth\n  fi\ndone
    <<-EOF\n$INDIVIDUAL_HEALTH_CHECKS\nEOF\n\n# comprobación de ready check general\nif
    test \"$OVERALL_HEALTH_CHECK\" = \"readyz check passed\"\nthen\n  echo \"[INFO]
    $OVERALL_HEALTH_CHECK.\"\n  echo \"[INFO] $OVERALL_HEALTH_CHECK.\" >> $file_checkapihealth\nelse\n
    \ echo \"[CRITICAL] $OVERALL_HEALTH_CHECK.\"\n  echo \"[CRITICAL] $OVERALL_HEALTH_CHECK.\"
    >> $file_checkapihealth\nfi\necho \"\"\necho \"\"\necho \"\"\n#####################################################
    END API #####################################################\n\n#####################################################
    NODES #####################################################\necho \"[DEBUG] Iniciando
    módulo checkNodes.sh.\"\necho \"\"\n# Módulo que comprueba la salud de los nodos\n\n#
    Porcentaje de uso de recursos\nCPU_WARN=80\nCPU_CRIT=90\nMEM_WARN=80\nMEM_CRIT=90\n\ncheck_api_health\nLISTA_NODOS=$(kubectl
    get nodes -o jsonpath='{.items[*].metadata.name}')\ncheck_api_health\nif kubectl
    api-resources | grep -q \"operator.openshift.io\"; then\n  # Lista de condiciones
    y sus expected values en OpenShift\n  CONDITION_LIST=$(cat <<EOF\n  {\n    \"MemoryPressure\"
    \             : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"DiskPressure\"
    \               : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"PIDPressure\"
    \                : {\"expected\": \"False\", \"severity\": \"WARNING\"},\n    \"Ready\"
    \                      : {\"expected\": \"True\" , \"severity\": \"CRITICAL\"}\n
    \ }\nEOF\n  )\nelse\n  # Lista de condiciones y sus expected values\n  CONDITION_LIST=$(cat
    <<EOF\n  {\n    \"FrequentKubeletRestart\"      : {\"expected\": \"False\", \"severity\":
    \"CRITICAL\"},\n    \"KernelDeadlock\"              : {\"expected\": \"False\",
    \"severity\": \"CRITICAL\"},\n    \"ReadonlyFilesystem\"          : {\"expected\":
    \"False\", \"severity\": \"CRITICAL\"},\n    \"ContainerRuntimeProblem\"     :
    {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"FrequentDockerRestart\"
    \      : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"KubeletProblem\"
    \             : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"VMEventScheduled\"
    \           : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"FrequentContainerdRestart\"
    \  : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"FilesystemCorruptionProblem\"
    : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"FrequentUnregisterNetDevice\"
    : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"MemoryPressure\"
    \             : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"DiskPressure\"
    \               : {\"expected\": \"False\", \"severity\": \"CRITICAL\"},\n    \"PIDPressure\"
    \                : {\"expected\": \"False\", \"severity\": \"WARNING\"},\n    \"Ready\"
    \                      : {\"expected\": \"True\" , \"severity\": \"CRITICAL\"}\n
    \ }\nEOF\n  )\nfi\n# Sirve para detectar si hay o no alertas\nNO_ALERTS=0\n\nfor
    node in $LISTA_NODOS\ndo\n  # Comprobación de uso de nodos.\n  check_api_health\n
    \ NODE_STATUS_LINE=\"$(kubectl top nodes \"$node\" --no-headers | tr -s \" \"
    | tr -d %)\"\n  NODE_CPU_PERCENT=$(printf '%s' \"$NODE_STATUS_LINE\" | cut -d
    \" \" -f 3)\n  NODE_MEM_PERCENT=$(printf '%s' \"$NODE_STATUS_LINE\" | cut -d \"
    \" -f 5)\n\n  if test \"$NODE_CPU_PERCENT\" -ge \"$CPU_CRIT\" || test \"$NODE_MEM_PERCENT\"
    -ge \"$MEM_CRIT\"\n  then\n    echo \"[CRITICAL] Nodo $node CPU: $NODE_CPU_PERCENT,
    MEM: $NODE_MEM_PERCENT\"\n    echo \"[CRITICAL] Nodo $node CPU: $NODE_CPU_PERCENT,
    MEM: $NODE_MEM_PERCENT\" >> $file_checknodes\n    NO_ALERTS=1\n  elif test \"$NODE_CPU_PERCENT\"
    -ge \"$CPU_WARN\" || test \"$NODE_MEM_PERCENT\" -ge \"$MEM_WARN\"\n  then\n    echo
    \"[WARNING] Nodo $node CPU: $NODE_CPU_PERCENT, MEM: $NODE_MEM_PERCENT\"\n    echo
    \"[WARNING] Nodo $node CPU: $NODE_CPU_PERCENT, MEM: $NODE_MEM_PERCENT\" >> $file_checknodes\n
    \   NO_ALERTS=1\n  fi\n\n  # Comprobar conditions del nodo\n  check_api_health\n
    \ CONDITIONS=$(kubectl get node \"$node\" -o jsonpath='{.status.conditions}')\n\n
    \ LISTA_COND=$(printf '%s' \"$CONDITION_LIST\" | jq -r 'keys | join(\" \")')\n\n
    \ for condition in $LISTA_COND\n  do\n    CONDITION_OBJ=$(printf '%s' \"$CONDITIONS\"
    | jq \".[] | select(.type == \\\"$condition\\\")\")\n    STATUS=$(printf '%s'
    \"$CONDITION_OBJ\" | jq -r \".status\")\n    EXPECTED=$(printf '%s' \"$CONDITION_LIST\"
    | jq -r \".[\\\"$condition\\\"].expected\")\n    SEVERITY=$(printf '%s' \"$CONDITION_LIST\"
    | jq -r \".[\\\"$condition\\\"].severity\")\n\n    if test \"$STATUS\" = \"$EXPECTED\"\n
    \   then\n      echo \"[INFO] Condición $condition en $node en estado esperado\"\n
    \     echo \"[INFO] Condición $condition en $node en estado esperado\" >> $file_checknodes\n
    \   else\n      echo \"[$SEVERITY] Condición $condition en $node en estado $STATUS,
    comprobar salud del nodo.\"\n      echo \"[$SEVERITY] Condición $condition en
    $node en estado $STATUS, comprobar salud del nodo.\" >> $file_checknodes\n      NO_ALERTS=1\n
    \   fi\n\n  done\ndone\n\n# Comprobación de estado de nodos\nif test $NO_ALERTS
    -eq 0\nthen\n  echo \"[INFO] Los nodos están en estado correcto.\"\nfi\n#####################################################
    END NODOS #####################################################\n\n#####################################################
    PODS #####################################################\necho \"\"\necho \"\"\necho
    \"\"\necho \"[DEBUG] Iniciando módulo checkPods.sh\"\necho \"\"\n\ncheck_api_health\n\nPODS_INFO_PER_LINE=$(kubectl
    get po -A -o json | jq -j '.items[] | \"[\\(.metadata),\\(.status)]\\n\"')\n\n#
    Recorrer todos los pods\nwhile read -r pod_line; do\n    NAME=$(printf '%s' \"$pod_line\"
    | jq -r .[0].name)\n    NAMESPACE=$(printf '%s' \"$pod_line\" | jq -r .[0].namespace)\n
    \   CONDITIONS=$(printf '%s' \"$pod_line\" | jq -r '.[1].conditions[] | \"\\(.type):\\(.status)\"')\n
    \   PHASE=$(printf '%s' \"$pod_line\" | jq -r '.[1].phase')\n    HEALTHY=0\n\n
    \   # Check Phase\n    if test \"$PHASE\" = \"Failed\"; then\n        echo \"[CRITICAL]
    El pod $NAME del namespace $NAMESPACE está en estado $PHASE.\"\n        echo \"[CRITICAL]
    El pod $NAME del namespace $NAMESPACE está en estado $PHASE.\" >> $file_checkpods\n
    \       HEALTHY=1\n    elif test \"$PHASE\" = \"Pending\" || test \"$PHASE\" =
    \"Unknown\"; then\n        echo \"[WARNING] El pod $NAME del namespace $NAMESPACE
    está en estado $PHASE.\"\n        echo \"[CRITICAL] El pod $NAME del namespace
    $NAMESPACE está en estado $PHASE.\" >> $file_checkpods\n        HEALTHY=1\n    elif
    test \"$PHASE\" = \"Succeeded\" || test \"$PHASE\" = \"Completed\"; then\n        continue\n
    \   fi\n\n    # Check Conditions\n    for condition in $CONDITIONS; do\n        CONDITION_STATUS=$(printf
    '%s' \"$condition\" | cut -d \":\" -f 2)\n        CONDITION_NAME=$(printf '%s'
    \"$condition\" | cut -d \":\" -f 1)\n        if test \"$CONDITION_STATUS\" !=
    \"True\" && test \"$CONDITION_NAME\" = \"Ready\"; then\n            echo \"[WARNING]
    El pod $NAME del namespace $NAMESPACE tiene la condición $CONDITION_NAME en estado
    $CONDITION_STATUS.\"\n            echo \"[WARNING] El pod $NAME del namespace
    $NAMESPACE tiene la condición $CONDITION_NAME en estado $CONDITION_STATUS.\" >>
    $file_checkpods\n            HEALTHY=1\n        elif test \"$CONDITION_STATUS\"
    != \"True\"; then\n            echo \"[CRITICAL] El pod $NAME del namespace $NAMESPACE
    tiene la condición $CONDITION_NAME en estado $CONDITION_STATUS.\"\n            echo
    \"[CRITICAL] El pod $NAME del namespace $NAMESPACE tiene la condición $CONDITION_NAME
    en estado $CONDITION_STATUS.\" >> $file_checkpods\n            HEALTHY=1\n        fi\n
    \   done\n\n    if test \"$HEALTHY\" -eq 0; then\n        echo \"[INFO] Las condiciones
    del pod $NAME del namespace $NAMESPACE están correctas.\"\n        echo \"[INFO]
    Las condiciones del pod $NAME del namespace $NAMESPACE están correctas.\" >> $file_checkpods\n
    \   fi\ndone <<-EOF\n$PODS_INFO_PER_LINE\nEOF\n#####################################################
    END PODS #####################################################\n\n#####################################################
    PVC/PV #####################################################\necho \"\"\necho
    \"\"\necho \"\"\necho \"[DEBUG] Iniciando módulo checkPvcs.sh\"\necho \"\"\ncheck_api_health\nPVC_PER_LINE=$(kubectl
    get pvc -A -o json | jq -r '.items[] | \"\\(.)\"')\n\ncheck_api_health\nPV_PER_LINE=$(kubectl
    get pv -o json | jq -r '.items[] | \"\\(.)\"')\n\n\n\n# Check PVCs\nwhile read
    -r pvc_line\ndo\n  NAME=$(printf '%s' \"$pvc_line\" | jq -r '.metadata.name')\n
    \ NAMESPACE=$(printf '%s' \"$pvc_line\" | jq -r '.metadata.namespace')\n  PHASE=$(printf
    '%s' \"$pvc_line\" | jq -r '.status.phase')\n\n  if test \"$PHASE\" != \"Bound\"
    && test \"$PHASE\" != \"\"\n  then\n    echo \"[WARNING] PVC $NAME del namespace
    $NAMESPACE está en estado $PHASE.\"\n    echo \"[WARNING] PVC $NAME del namespace
    $NAMESPACE está en estado $PHASE.\" >> $file_checkpvcs\n  elif test \"$PHASE\"
    != \"\"\n  then\n    echo \"[INFO] PVC $NAME del namespace $NAMESPACE está bound.\"\n
    \   echo \"[INFO] PVC $NAME del namespace $NAMESPACE está bound.\" >> $file_checkpvcs\n
    \ fi\ndone <<-EOF\n$PVC_PER_LINE\nEOF\n\n\n# Check de PVs\nwhile read -r pv_line\ndo\n
    \ NAME=$(printf '%s' \"$pv_line\" | jq -r '.metadata.name')\n  PHASE=$(printf
    '%s' \"$pv_line\" | jq -r '.status.phase')\n\n  IS_HEALTHY=0\n\n  # Phase check\n
    \ if test \"$PHASE\" = 'Failed'\n  then\n    echo \"[CRITICAL] PV $NAME esta en
    estado $PHASE.\"\n    echo \"[CRITICAL] PV $NAME esta en estado $PHASE.\" >> $file_checkpvcs\n
    \   IS_HEALTHY=1\n  elif test \"$PHASE\" = 'Available'\n  then\n    echo \"[NOTICE]
    PV $NAME no está asociado con ningún Claim, estado $PHASE.\"\n    echo \"[NOTICE]
    PV $NAME no está asociado con ningún Claim, estado $PHASE.\" >> $file_checkpvcs\n
    \ fi\n\n\n  if test \"$IS_HEALTHY\" -eq 0\n  then\n    echo \"[INFO] PV $NAME
    ok.\"\n    echo \"[INFO] PV $NAME ok.\"  >> $file_checkpvcs\n  fi\n\ndone <<-EOF\n$PV_PER_LINE\nEOF\n#####################################################
    END PVC/PV #####################################################\n\n#####################################################
    EVENTS #####################################################\necho \"\"\necho
    \"\"\necho \"\"\necho \"[DEBUG] Iniciando módulo checkEvents.sh\"\necho \"\"\n\n#
    Chequeo de eventos\ncheck_api_health\n\nkubectl get events -A -o json | /tmp/yq
    -r '.items[]' | while IFS= read -r event; do\n    NAME=$(echo \"$event\" | /tmp/yq
    -r '.involvedObject.name')\n    NAMESPACE=$(echo \"$event\" | /tmp/yq -r '.involvedObject.namespace')\n
    \   REPORTING_COMPONENT=$(echo \"$event\" | /tmp/yq -r '.reportingComponent')\n
    \   DATE=$(echo \"$event\" | /tmp/yq -r '.firstTimestamp')\n    REASON=$(echo
    \"$event\" | /tmp/yq -r '.reason')\n    MESSAGE=$(echo \"$event\" | /tmp/yq -r
    '.message')\n    TYPE=$(echo \"$event\" | /tmp/yq -r '.type')\n    \n    if [
    \"$TYPE\" != \"Normal\" ]; then\n        echo \"[WARNING] Evento $NAME en namespace
    $NAMESPACE de $REPORTING_COMPONENT en $DATE. $REASON: $MESSAGE.\"\n        if
    echo \"$MESSAGE\" | grep -q -E \"$parameter_events_ignore_string\"; then\n                continue\n
    \       fi\n        echo \"[WARNING] Evento $NAME en namespace $NAMESPACE de $REPORTING_COMPONENT
    en $DATE. $REASON: $MESSAGE.\" >> $file_checkevents\n    fi\ndone\n#####################################################
    END EVENTS #####################################################\n\n#####################################################
    CERTS #####################################################\necho \"\"\necho \"\"\necho
    \"\"\necho \"[DEBUG] Iniciando módulo checkCertificates.sh\"\necho \"\"\n\n# Get
    all namespaces\ncheck_api_health\nnamespaces=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')\n\nfor
    namespace in $namespaces; do\n    check_api_health\n    secrets=$(kubectl get
    secrets -n \"$namespace\" -o jsonpath='{.items[*].metadata.name}')\n    \n    for
    secret in $secrets; do\n        check_api_health\n        cert_data=$(kubectl
    get secret \"$secret\" -n \"$namespace\" -o jsonpath='{.data.tls\\.crt}')\n        \n
    \       echo \"$cert_data\" | base64 --decode > $file_tls_cert 2>/dev/null\n        \n
    \       openssl x509 -in $file_tls_cert -text -noout >/dev/null 2>&1\n        if
    [ $? -ne 0 ]; then continue; fi\n        \n        not_before=$(openssl x509 -in
    $file_tls_cert -text -noout | grep 'Not Before' | awk -F': ' '{print $2}')\n        not_after=$(openssl
    x509 -in $file_tls_cert -text -noout | grep 'Not After' | awk -F': ' '{print $2}')\n
    \       subject=$(openssl x509 -in $file_tls_cert -text -noout | grep 'Subject:'
    | awk -F': ' '{print $2}' | awk -F'=' '{print $2}' | sed 's/, CN//')\n\n        formatted_not_before=$(date
    -d \"$not_before\" +\"%s\" 2>/dev/null)\n        formatted_not_after=$(date -d
    \"$not_after\" +\"%s\" 2>/dev/null)\n        \n        current_date=$(date +\"%s\")\n
    \       \n        if [ \"$current_date\" -ge \"$formatted_not_after\" ]; then\n
    \           echo \"[CRITICAL] El certificado '$secret' del namespace '$namespace'
    está expirado.\"\n            echo \"[CRITICAL] El certificado '$secret' del namespace
    '$namespace' está expirado.\" >> $file_checkcertificates\n        elif [ $((formatted_not_after
    - current_date)) -lt $((30*86400)) ]; then\n            time_until_expiration=$((formatted_not_after
    - current_date))\n            days=$((time_until_expiration / 86400))\n            hours=$((
    (time_until_expiration % 86400) / 3600 ))\n            minutes=$(( (time_until_expiration
    % 3600) / 60 ))\n\n            item_to_check=$(echo \"$subject\" | sed \"s/^ *//;s/
    *$//\")\n\n            match_found=false\n            for evade_subject in $parameter_certificates_evade_subjects;
    do\n                trimmed_evade_subject=$(echo \"$evade_subject\" | sed \"s/^
    *//;s/ *$//\")\n                if [ \"$item_to_check\" = \"$trimmed_evade_subject\"
    ] || [ \"${item_to_check#\"$trimmed_evade_subject\"}\" != \"$item_to_check\" ];
    then\n                    match_found=true\n                    break\n                fi\n
    \           done\n\n            if [ \"$match_found\" = true ]; then\n                :\n
    \           else\n                if [ \"$time_until_expiration\" -ge 86400 ];
    then\n                    echo \"[WARNING] El certificado '$secret' del namespace
    '$namespace' va a expirar en $days días, $hours horas y $minutes minutos. Issuer
    es '$subject'\"\n                    echo \"[WARNING] El certificado '$secret'
    del namespace '$namespace' va a expirar en $days días, $hours horas y $minutes
    minutos.\" >> $file_checkcertificates\n                fi\n            fi\n        fi\n
    \   done\ndone\nrm $file_tls_cert\n#####################################################
    END CERTS #####################################################\n\n#####################################################
    CLUSTEROPERATOR #####################################################\ncheck_api_health\nif
    kubectl api-resources | grep -q \"operator.openshift.io\"; then\n  echo \"\"\n
    \ echo \"\"\n  echo \"\"\n  echo \"[DEBUG] Iniciando módulo OC\"\n  echo \"\"\n
    \ oc get clusteroperator > $file_clusteroperator\n  cat $file_clusteroperator\nfi\n\necho
    \"\"\necho \"\"\necho \"\"\n#####################################################
    END CLUSTEROPERATOR #####################################################\n\n#####################################################
    statistics #####################################################\nINFOS=$(grep
    -o \"\\[INFO\\]\" $file_checkapihealth $file_checknodes $file_checkpods $file_checkpvcs
    $file_checkevents $file_checkcertificates | wc -l)\nNOTICES=$(grep -o \"\\[NOTICES\\]\"
    $file_checkapihealth $file_checknodes $file_checkpods $file_checkpvcs $file_checkevents
    $file_checkcertificates | wc -l)\nWARNINGS=$(grep -o \"\\[WARNING\\]\" $file_checkapihealth
    $file_checknodes $file_checkpods $file_checkpvcs $file_checkevents $file_checkcertificates
    | wc -l)\nCRITICALS=$(grep -o \"\\[CRITICAL\\]\" $file_checkapihealth $file_checknodes
    $file_checkpods $file_checkpvcs $file_checkevents $file_checkcertificates | wc
    -l)\nprintf '\\n######## RESUMEN ###################\\n'\nprintf '\\e[94m INFOS:
    \    %s\\e[0m\\n' \"$INFOS\"\nprintf '\\e[96m NOTICES:   %s\\e[0m\\n' \"$NOTICES\"\nprintf
    '\\e[93m WARNINGS:  %s\\e[0m\\n' \"$WARNINGS\"\nprintf '\\e[91m CRITICALS: %s\\e[0m\\n'
    \"$CRITICALS\"\nprintf '####################################\\n'\n#####################################################
    END statistics #####################################################\n\n#####################################################
    final report #####################################################\necho \"\"\necho
    \"\"\necho \"\"\necho \"Las alertas a reportar son las que aparecen a continuación:\"\necho
    \"\"\necho \"\"\necho '######## NOTICES ##################'\nprintf '\\e[96m'\nfor
    file in \"$file_checkapihealth\" \"$file_checknodes\" \"$file_checkpods\" \"$file_checkpvcs\"
    \"$file_checkevents\" \"$file_checkcertificates\"; do\n    grep '^\\[NOTICE\\]'
    \"$file\"\ndone\nprintf '\\e[0m'\necho ''\n\necho '######## WARNINGS ##################'\nprintf
    '\\e[93m'\nfor file in \"$file_checkapihealth\" \"$file_checknodes\" \"$file_checkpods\"
    \"$file_checkpvcs\" \"$file_checkevents\" \"$file_checkcertificates\"; do\n    grep
    '^\\[WARNING\\]' \"$file\" | grep -v 'health-check-cronjob.*namespace logicalis'\ndone
    \nprintf '\\e[0m'\n\necho ''\necho '######## CRITICALS #################'\nprintf
    '\\e[91m'\nfor file in \"$file_checkapihealth\" \"$file_checknodes\" \"$file_checkpods\"
    \"$file_checkpvcs\" \"$file_checkevents\" \"$file_checkcertificates\"; do\n    grep
    '^\\[CRITICAL\\]' \"$file\" | grep -v 'health-check-cronjob.*namespace logicalis'\ndone\nif
    [ -f \"/tmp/clusteroperator.txt\" ]; then awk 'NR > 1 && $3 != \"True\" {printf
    \"[CLUSTEROPERATOR] %s %s %s %s %s %s\\n\", $1, $2, $3, $4, $5, $6}' $file_clusteroperator\nprintf
    '\\e[0m';fi\n\n\nrm \"$file_checkapihealth\" \"$file_checknodes\" \"$file_checkpods\"
    \"$file_checkpvcs\" \"$file_checkevents\" \"$file_checkcertificates\" \ncheck_api_health\nif
    kubectl api-resources | grep -q \"operator.openshift.io\"; then\n    rm \"$file_clusteroperator\"\nfi\n#####################################################
    END final report #####################################################\n\n#####################################################
    pod exit #####################################################\nif [ \"$WARNINGS\"
    -ge 1 ] || [ \"$CRITICALS\" -ge 1 ]; then\n    exit 1  # Exit with a non-zero
    status to crash the pod\nelse\n    echo \"Pod completed successfully.\"\n    exit
    0  # Exit with zero status to indicate success\nfi\n#####################################################
    END pod exit #####################################################"
kind: ConfigMap
metadata:
  name: health-check-scripts
  namespace: logicalis
