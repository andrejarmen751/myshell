apiVersion: v1
kind: ConfigMap
metadata:
  name: debug-configmap
  namespace: debug
data:
  oc.bash: |
    #!/bin/bash
    if kubectl api-resources | grep -q "operator.openshift.io"; then
        if curl -L -o /debug/oc.tar https://downloads-openshift-console.apps.gmaopro.northeurope.aroapp.io/amd64/linux/oc.tar; then
            :
        else
            curl -L -o /debug/oc.tar https://downloads-openshift-console.apps.gmao.northeurope.aroapp.io/amd64/linux/oc.tar
        fi
        tar -xvf /debug/oc.tar -C /debug
        chmod +x /debug/oc
        export PATH="$PATH:/debug/"
    fi
  system.bash: |
    #!/bin/bash
    apt install nano -y;export EDITOR=nano
    apt install zsh -y
    apt install cron -y
    apt install bsdmainutils -y
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    echo >> /root/.zshrc
    echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /root/.zshrc
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    brew install gcc 
    brew install shfmt
  alias.bash: |
    #!/bin/bash
    echo "alias cls='clear'" >> /root/.zshrc
    echo "alias h='history'" >> /root/.zshrc
    echo "alias nano='nano -l'" >> /root/.zshrc
    echo "alias oc='./debug/oc'" >> /root/.zshrc
    echo "alias shfmt='/home/linuxbrew/.linuxbrew/bin/shfmt -w'" >> /root/.zshrc
    export GREP_COLORS='mt=01;32:sl=01;35' >> /root/.zshrc
  k8s-containers-not-ready.bash: |
    #!/bin/bash
    kubectl get pods -A -o json | jq -r '.items[] | select(.status.containerStatuses[].ready == false) | [.metadata.name, .metadata.namespace, .status.phase, (.status.containerStatuses[] | select(.ready == false) | .ready)] | @tsv' | awk 'BEGIN {printf "%-75s %-40s %-15s %-15s\n", "NAME", "NAMESPACE", "STATUS", "CONTAINERS_READY"} {printf "%-75s %-40s %-15s %-15s\n", $1, $2, $3, $4}'
  k8s-certificates-issuers.bash: |
    #!/bin/sh
    namespaces=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')

    for namespace in $namespaces; do
        certificates=$(kubectl get certificates -n "$namespace" -o jsonpath='{.items[*].metadata.name}')
        
        if [ -z "$certificates" ]; then
            continue
        fi

        for cert in $certificates; do
            if kubectl get certificate "$cert" -n "$namespace" -o jsonpath='{.spec.secretName}' | grep -q "$secret"; then
                echo "Certificate $cert references Secret $secret in namespace $namespace"
            fi
        done

        for cert in $certificates; do
            issuer=$(kubectl get certificate "$cert" -n "$namespace" -o jsonpath='{.spec.issuerRef.name}')
            issuerKind=$(kubectl get certificate "$cert" -n "$namespace" -o jsonpath='{.spec.issuerRef.kind}')
            if [ "$issuerKind" = "ClusterIssuer" ]; then
                echo "Certificate $cert uses ClusterIssuer $issuer in namespace $namespace"
            fi
        done
    done
  k8s-certificates-state.bash: |
    #!/bin/sh
    file_tls_cert="/tmp/tls.crt"
    if [ -f "/tmp/tls.crt" ]; then rm /tmp/tls.crt; else touch /tmp/tls.crt;fi
    namespaces=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}')
    evade_subjects="system:kube-controller-manager system:kube-scheduler system:openshift-aggregator system:serviceaccount:openshift-kube-apiserver:check-endpoints system:masters api.gmaopro.northeurope.aroapp.io api.gmao.northeurope.aroapp.io api-int.gmaopro.northeurope.aroapp.io api-int.gmao.northeurope.aroapp.io kube-master 127.0.0.1 172.30.0.1 openshift-kube-apiserver-operator_aggregator-client-signer@1728462101 openshift-kube-apiserver-operator_aggregator-client-signer@1728471736 kube-csr-signer_@1728591556 kube-csr-signer_@1728601207 system:serviceaccount:openshift-monitoring:prometheus-k8s system:serviceaccount:openshift-oauth-apiserver:openshift-authenticator 'Red Hat, Inc.'"

    for namespace in $namespaces; do
        secrets=$(kubectl get secrets -n "$namespace" -o jsonpath='{.items[*].metadata.name}')
        
        for secret in $secrets; do
            cert_data=$(kubectl get secret "$secret" -n "$namespace" -o jsonpath='{.data.tls\.crt}')
            
            echo "$cert_data" | base64 --decode > $file_tls_cert 2>/dev/null
            
            openssl x509 -in $file_tls_cert -text -noout >/dev/null 2>&1
            if [ $? -ne 0 ]; then continue; fi
            
            not_before=$(openssl x509 -in $file_tls_cert -text -noout | grep 'Not Before' | awk -F': ' '{print $2}')
            not_after=$(openssl x509 -in $file_tls_cert -text -noout | grep 'Not After' | awk -F': ' '{print $2}')
            subject=$(openssl x509 -in $file_tls_cert -text -noout | grep 'Subject:' | awk -F': ' '{print $2}' | awk -F'=' '{print $2}' | sed 's/, CN//')

            formatted_not_before=$(date -d "$not_before" +"%s" 2>/dev/null)
            formatted_not_after=$(date -d "$not_after" +"%s" 2>/dev/null)
            
            current_date=$(date +"%s")
            
            if [ "$current_date" -ge "$formatted_not_after" ]; then
                echo "[CRITICAL] El certificado '$secret' del namespace '$namespace' está expirado."
            elif [ $((formatted_not_after - current_date)) -lt $((30*86400)) ]; then
                time_until_expiration=$((formatted_not_after - current_date))
                days=$((time_until_expiration / 86400))
                hours=$(( (time_until_expiration % 86400) / 3600 ))
                minutes=$(( (time_until_expiration % 3600) / 60 ))

                item_to_check=$(echo "$subject" | sed "s/^ *//;s/ *$//")

                if echo "$evade_subjects" | grep -q -w "$item_to_check"; then
                    :
                else
                    if [ "$time_until_expiration" -ge 3600 ]; then
                        echo "[WARNING] El certificado '$secret' del namespace '$namespace' va a expirar en $days días, $hours horas y $minutes minutos."
                        echo $subject
                    fi
                fi
            fi
        done
    done
    rm $file_tls_cert