# Versió chart:
# 5.0.2
# Document original
# https://gitlab.com/gitlab-org/charts/gitlab/-/blob/master/values.yaml
global:
  common:
    labels: {}
  operator:
    enabled: false
    rollout:
      autoPause: true
  pod:
    labels: {}
  # Edició Gitlab
  edition: ce
  # Versió Gitlab
  #gitlabVersion: 13.8.1
  #gitlabVersion: 13.12.6
  #gitlabVersion: 14.0.1
  gitlabVersion: 15.8.3
  application:
    create: false
    links: []
    allowClusterRoles: true
    # Configuracions per URL's 
    # https://docs.gitlab.com/charts/charts/globals#configure-host-settings
  hosts:
    domain: domain.com
    hostSuffix:
    https: true
    externalIP:
    gitlab:
      name: git.domain.com
      https: true
    registry:
      name: r-gitlab2.domain.com
      https: true
    minio:
      name: m-gitlab2.domain.com
      https: true
    smartcard:
      name: s-gitlab2.domain.com
    kas:
      name: k-gitlab2.domain.com
    pages:
      name: p-gitlab2.domain.com
      https: true
  # Edició ingress, cal tenir generat el secret del certificat per al domini (secretName)
  # https://docs.gitlab.com/charts/charts/globals#configure-ingress-settings
  ingress:
    configureCertmanager: false
    provider: nginx
    annotations: {}
    enabled: true
    tls:
      enabled: true
      secretName: intra-cert
    path: /
    pathType: Prefix
    class: 'nginx'
  gitlab:
    license: {}
  # Contrasenya inicial per usuari root
  initialRootPassword:
    secret: gitlab-gitlab-initial-root-password
    key: password
  psql:
    connectTimeout:
    password: {}
  redis:
    password:
      enabled: true
  # Configuracions per Gitaly
  # https://docs.gitlab.com/charts/charts/globals#configure-gitaly-settings
  gitaly:
    # Dades de projectes, en volum (per defecte en host)
    persistence:
      enabled: true
      storageClass: longhorn
      accessMode: ReadWriteOnce
      size: 5Gi
      matchLabels: {}
      matchExpressions: []
      subPath: "/data"
      annotations: {}
    enabled: true
    authToken: {}
    internal:
      names: ['default']
    external: []
    service:
      name: gitaly
      type: ClusterIP
      externalPort: 8075
      internalPort: 8075
      tls:
        externalPort: 8076
        internalPort: 8076
    tls:
      enabled: false
  praefect:
    enabled: false
    replaceInternalGitaly: true
    authToken: {}
    autoMigrate: true
    dbSecret: {}
    virtualStorages:
      - name: default
        # Repliques de gitaly
        gitalyReplicas: 2
        maxUnavailable: 1
    psql:
      sslMode: 'disable'
    service:
      name: praefect
      type: ClusterIP
      externalPort: 8075
      internalPort: 8075
      tls:
        externalPort: 8076
        internalPort: 8076
    tls:
      enabled: false
  minio:
    enabled: false
    credentials: {}
  grafana:
    enabled: false
  appConfig:
    enableUsagePing: true
    enableSeatLink: true
    enableImpersonation:
    applicationSettingsCacheSeconds: 60
    defaultCanCreateGroup: true
    usernameChangingEnabled: true
    issueClosingPattern:
    defaultTheme:
    defaultProjectsFeatures:
      issues: true
      mergeRequests: true
      wiki: false
      snippets: true
      builds: true
    webhookTimeout:
    maxRequestDurationSeconds:
    cron_jobs:
      expire_build_artifacts_worker:
        cron: "*/7 * * * *"
      repository_check_worker:
        cron: "20 * * * *"
      repository_archive_cache_worker:
        cron: "0 * * * *"
    contentSecurityPolicy:
      enabled: false
      report_only: true
    gravatar:
      plainUrl:
      sslUrl:
    extra:
      googleAnalyticsId:
      matomoUrl:
      matomoSiteId:
      matomoDisableCookies:
    # Connexió amb s3 i definició buckets
    # https://docs.gitlab.com/charts/charts/globals#lfs-artifacts-uploads-packages-external-mr-diffs
    object_store:
      enabled: true
      proxy_download: true
      storage_options: {}
      connection:
        secret: storage-s3
        key: config
    lfs:
      enabled: true
      proxy_download: true
      bucket: gitlab-lfs
      connection: {}
    artifacts:
      enabled: true
      proxy_download: true
      bucket: gitlab-artifacts
      connection: {}
    uploads:
      enabled: true
      proxy_download: true
      bucket: gitlab-uploads
      connection: {}
    packages:
      enabled: true
      proxy_download: true
      bucket: gitlab-packages
      connection: {}
    externalDiffs:
      enabled: true
      when:
      proxy_download: true
      bucket: gitlab-mr-diffs
      connection: {}
    terraformState:
      enabled: true
      bucket: gitlab-terraform-state
      connection: {}
    dependencyProxy:
      enabled: true
      proxy_download: true
      bucket: gitlab-dependency-proxy
      connection: {}
    pseudonymizer:
      configMap:
      bucket: gitlab-pseudo
      connection: {}
    backups:
      bucket: gitlab-backups
      tmpBucket: gitlab-tmp-backup
    incomingEmail:
      enabled: false
      address: ""
      host: "imap.gmail.com"
      port: 993
      ssl: true
      startTls: false
      user: ""
      password:
        secret: ""
        key: password
      expungeDeleted: false
      logger:
        logPath: "/dev/stdout"
      mailbox: inbox
      idleTimeout: 60
      inboxMethod: "imap"
      clientSecret:
        key: secret
      pollInterval: 60
    serviceDeskEmail:
      enabled: false
      address: ""
      host: "imap.gmail.com"
      port: 993
      ssl: true
      startTls: false
      user: ""
      password:
        secret: ""
        key: password
      expungeDeleted: false
      logger:
        logPath: "/dev/stdout"
      mailbox: inbox
      idleTimeout: 60
      inboxMethod: "imap"
      clientSecret:
        key: secret
      pollInterval: 60
    gitlab_kas: {}
    omniauth:
      enabled: false
      autoSignInWithProvider:
      syncProfileFromProvider: []
      syncProfileAttributes: ['email']
      allowSingleSignOn: ['saml']
      blockAutoCreatedUsers: true
      autoLinkLdapUser: false
      autoLinkSamlUser: false
      autoLinkUser: []
      externalProviders: []
      allowBypassTwoFactor: []
      providers: []
    sentry:
      enabled: false
      dsn:
      clientside_dsn:
      environment:
    smartcard:
      enabled: false
      CASecret:
      clientCertificateRequiredHost:
      sanExtensions: false
      requiredForGitAccess: false
    sidekiq:
      routingRules: []
    initialDefaults: {}
  oauth:
    gitlab-pages: {}
  geo:
    enabled: false
    role: primary
    nodeName:
    psql:
      password: {}
    registry:
      replication:
        enabled: false
        primaryApiUrl:
  kas:
    enabled: false
  shell:
    authToken: {}
    hostKeys: {}
    tcp:
      proxyProtocol: false
  railsSecrets: {}
  rails:
    bootsnap:
      enabled: true
  registry:
    bucket: gitlab-registry
    certificate: {}
    httpSecret: {}
    notificationSecret: {}
    notifications: {}
  pages:
    enabled: false
    accessControl: false
    path:
    host:
    port:
    https: # default true
    externalHttp: []
    externalHttps: []
    artifactsServer: true
    objectStore:
      enabled: true
      bucket: gitlab-pages
      connection: {}
    apiSecret: {}
    authSecret: {}
  ## Timezone for containers.
  time_zone: GMT
  ## Global Service Annotations and Labels
  service:
    labels: {}
    annotations: {}
  ## Global Deployment Annotations
  deployment:
    annotations: {}
  antiAffinity: soft
  workhorse:
    serviceName: webservice-default
  ## https://docs.gitlab.com/charts/charts/globals#configure-webservice
  webservice:
    workerTimeout: 60
  certificates:
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/alpine-certificates
      tag: 20191127-r2
    customCAs: []
  kubectl:
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      tag: 1.16.15
      pullSecrets: []
    securityContext:
      runAsUser: 65534
      fsGroup: 65534
  busybox:
    image:
      repository: busybox
      tag: latest
  serviceAccount:
    enabled: false
    create: true
    annotations: {}
  tracing:
    connection:
      string: ""
    urlTemplate: ""
  extraEnv: {}
## End of global
upgradeCheck:
  enabled: true
  image: {}
  # repository:
  # tag:
  securityContext:
    # in alpine/debian/busybox based images, this is `nobody:nogroup`
    runAsUser: 65534
    fsGroup: 65534
  tolerations: []
  resources:
    requests:
      cpu: 50m
certmanager:
  installCRDs: false
  nameOverride: certmanager
  # Install cert-manager chart. Set to false if you already have cert-manager
  # installed or if you are not using cert-manager.
  install: false
  # Other cert-manager configurations from upstream
  # See https://github.com/jetstack/cert-manager/blob/master/deploy/charts/cert-manager/README#configuration
  rbac:
    create: false
nginx-ingress:
  enabled: false
  tcpExternalConfig: "true"
  controller:
    addHeaders:
      Referrer-Policy: strict-origin-when-cross-origin
    config:
      hsts: "false"
      hsts-include-subdomains: "false"
      server-name-hash-bucket-size: "256"
      use-http2: "true"
      ssl-ciphers: "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4"
      ssl-protocols: "TLSv1.3 TLSv1.2"
      server-tokens: "false"
    service:
      externalTrafficPolicy: "Local"
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    publishService:
      enabled: true
      # Nº repliques per ingress
    replicaCount: 1
    minAvailable: 1
    scope:
      enabled: true
    metrics:
      enabled: true
      service:
        annotations:
          gitlab.com/prometheus_scrape: "true"
          gitlab.com/prometheus_port: "10254"
          prometheus.io/scrape: "true"
          prometheus.io/port: "10254"
    admissionWebhooks:
      enabled: false
  defaultBackend:
    enabled: true
    minAvailable: 1
    replicaCount: 1
    resources:
      requests:
        cpu: 5m
        memory: 5Mi
  rbac:
    create: true
    scope: true
  serviceAccount:
    create: true
## Installation & configuration of stable/prometheus
## See requirements.yaml for current version
prometheus:
  # Assignació StorageClass per al servei
  persistence:
    storageClass: longhorn
    size: 5Gi
  install: true
  rbac:
    create: true
  alertmanager:
    enabled: false
  alertmanagerFiles:
    alertmanager.yml: {}
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false
  server:
    retention: 15d
    strategy:
      type: Recreate
  #
  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
                - localhost:9090
        - job_name: 'kubernetes-apiservers'
          kubernetes_sd_configs:
            - role: endpoints
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          relabel_configs:
            - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: default;kubernetes;https
        - job_name: 'kubernetes-pods'
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_gitlab_com_prometheus_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_gitlab_com_prometheus_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_gitlab_com_prometheus_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
        - job_name: 'kubernetes-service-endpoints'
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - action: keep
              regex: true
              source_labels:
                - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scrape
            - action: replace
              regex: (https?)
              source_labels:
                - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
                - __meta_kubernetes_service_annotation_gitlab_com_prometheus_path
              target_label: __metrics_path__
            - action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              source_labels:
                - __address__
                - __meta_kubernetes_service_annotation_gitlab_com_prometheus_port
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - action: replace
              source_labels:
                - __meta_kubernetes_namespace
              target_label: kubernetes_namespace
            - action: replace
              source_labels:
                - __meta_kubernetes_service_name
              target_label: kubernetes_name
            - action: replace
              source_labels:
                - __meta_kubernetes_pod_node_name
              target_label: kubernetes_node
        - job_name: 'kubernetes-services'
          metrics_path: /probe
          params:
            module: [http_2xx]
          kubernetes_sd_configs:
            - role: service
          relabel_configs:
            - source_labels: [__meta_kubernetes_service_annotation_gitlab_com_prometheus_probe]
              action: keep
              regex: true
            - source_labels: [__address__]
              target_label: __param_target
            - target_label: __address__
              replacement: blackbox
            - source_labels: [__param_target]
              target_label: instance
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_service_name]
              target_label: kubernetes_name
## Configuration of Redis
## https://docs.gitlab.com/charts/architecture/decisions#redis
## https://docs.gitlab.com/charts/installation/deployment.html#redis
redis:
  install: true
  existingSecret: gitlab-redis-secret
  existingSecretKey: redis-password
  usePasswordFile: true
  cluster:
    enabled: false
  metrics:
    enabled: true
    # Assignació StorageClass per al servei
  master:
    persistence:
      storageClass: longhorn
      size: 2Gi
  volumePermissions:
    enabled: true
    containerSecurityContext:
      runAsUser: 0
postgresql:
  postgresqlUsername: gitlab
  postgresqlPostgresPassword: bogus
  install: true
  postgresqlDatabase: gitlabhq_production
  image:
    tag: 12.7.0
  usePasswordFile: true
  existingSecret: 'bogus'
  initdbScriptsConfigMap: 'bogus'
  master:
    extraVolumeMounts:
      - name: custom-init-scripts
        mountPath: /docker-entrypoint-preinitdb.d/init_revision.bash
        subPath: init_revision.bash
    podAnnotations:
      postgresql.gitlab/init-revision: "1"
  volumePermissions:
    enabled: true
    securityContext:
      runAsUser: 0
  securityContext:
    enabled: true
    fsGroup: 0
    runAsUser: 0
    # Assignació StorageClass per al servei
  persistence:
    storageClass: longhorn
    size: 5Gi
  metrics:
    enabled: true
  registry:
    enabled: false
shared-secrets:
  enabled: true
  rbac:
    create: true
  selfsign:
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/cfssl-self-sign
      tag: 1.2
    keyAlgorithm: "rsa"
    keySize: "4096"
    expiry: "3650d"
    caSubject: "GitLab Helm Chart"
    pullSecrets: []
  env: production
  serviceAccount:
    enabled: true
    create: true
    name: # Specify a pre-existing ServiceAccount name
  resources:
    requests:
      cpu: 50m
  securityContext:
    # in debian/alpine based images, this is `nobody:nogroup`
    runAsUser: 65534
    fsGroup: 65534
  tolerations: []
  podLabels: {}
  annotations: {}
# Dades per minio
## Installation & configuration of gitlab/gitlab-runner
## See requirements.yaml for current version
gitlab-runner:
  install: true
  rbac:
    create: true
  runners:
    locked: false
    config: |
      [[runners]]
        [runners.kubernetes]
        image = "ubuntu:18.04"
        [runners.cache]
          Type = "s3"
          Path = "gitlab-runner-cache"
          Shared = true
          [runners.cache.s3]
            ServerAddress = "store.domain.com"
            BucketName = "gitlab-runner-cache"
            BucketLocation = "us-east-1"
            Insecure = false
            AccessKey = "gitlab"
            SecretKey = "vNwVB48mh5CkU4b2hraUTU8G13fO8"
  podAnnotations:
    gitlab.com/prometheus_scrape: "true"
    gitlab.com/prometheus_port: 9252
grafana:
  nameOverride: grafana-app
  admin:
    existingSecret: bogus
  env:
    GF_SECURITY_ADMIN_USER: bogus
    GF_SECURITY_ADMIN_PASSWORD: bogus
  command: ["sh", "-x", "/tmp/scripts/import-secret.bash"]
  sidecar:
    dashboards:
      enabled: true
      label: gitlab_grafana_dashboard
    datasources:
      enabled: true
      label: gitlab_grafana_datasource
  grafana.ini:
    server:
      serve_from_sub_path: true
      root_url: http://localhost/-/grafana/
    auth:
      login_cookie_name: gitlab_grafana_session
  extraSecretMounts:
    - name: initial-password
      mountPath: /tmp/initial
      readOnly: true
      secretName: gitlab-grafana-initial-password
      defaultMode: 400
  extraConfigmapMounts:
    - name: import-secret
      mountPath: /tmp/scripts
      configMap: gitlab-grafana-import-secret
      readOnly: true
  testFramework:
    enabled: false
# Configuració per realitzar backups
gitlab:
  task-runner:
    backups:
      cron:
        schedule: 5 23 * * *
        successfulJobsHistoryLimit: 3
        failedJobsHistoryLimit: 1
        extraArgs: "--skip artifacts --maximum-backups 3"
        enabled: true
        concurrencyPolicy: Replace
      objectStorage:
        backend: s3
        config:
          secret: storage-s3-task-cfg
          key: config
    replicas: 1
    antiAffinityLabels:
      matchLabels:
        app: 'gitaly'
